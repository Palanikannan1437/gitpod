// Copyright (c) 2022 Gitpod GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License-AGPL.txt in the project root for license information.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: gitpod/stable/v1/yolo.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// YoloServiceClient is the client API for YoloService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YoloServiceClient interface {
	DoSomething(ctx context.Context, in *DoSomethingRequest, opts ...grpc.CallOption) (*DoSomethingResponse, error)
}

type yoloServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewYoloServiceClient(cc grpc.ClientConnInterface) YoloServiceClient {
	return &yoloServiceClient{cc}
}

func (c *yoloServiceClient) DoSomething(ctx context.Context, in *DoSomethingRequest, opts ...grpc.CallOption) (*DoSomethingResponse, error) {
	out := new(DoSomethingResponse)
	err := c.cc.Invoke(ctx, "/gitpod.stable.v1.YoloService/DoSomething", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YoloServiceServer is the server API for YoloService service.
// All implementations must embed UnimplementedYoloServiceServer
// for forward compatibility
type YoloServiceServer interface {
	DoSomething(context.Context, *DoSomethingRequest) (*DoSomethingResponse, error)
	mustEmbedUnimplementedYoloServiceServer()
}

// UnimplementedYoloServiceServer must be embedded to have forward compatible implementations.
type UnimplementedYoloServiceServer struct {
}

func (UnimplementedYoloServiceServer) DoSomething(context.Context, *DoSomethingRequest) (*DoSomethingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoSomething not implemented")
}
func (UnimplementedYoloServiceServer) mustEmbedUnimplementedYoloServiceServer() {}

// UnsafeYoloServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YoloServiceServer will
// result in compilation errors.
type UnsafeYoloServiceServer interface {
	mustEmbedUnimplementedYoloServiceServer()
}

func RegisterYoloServiceServer(s grpc.ServiceRegistrar, srv YoloServiceServer) {
	s.RegisterService(&YoloService_ServiceDesc, srv)
}

func _YoloService_DoSomething_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoSomethingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YoloServiceServer).DoSomething(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitpod.stable.v1.YoloService/DoSomething",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YoloServiceServer).DoSomething(ctx, req.(*DoSomethingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// YoloService_ServiceDesc is the grpc.ServiceDesc for YoloService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YoloService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitpod.stable.v1.YoloService",
	HandlerType: (*YoloServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoSomething",
			Handler:    _YoloService_DoSomething_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitpod/stable/v1/yolo.proto",
}
