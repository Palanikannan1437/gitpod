/**
 * Copyright (c) 2022 Gitpod GmbH. All rights reserved.
 * Licensed under the GNU Affero General Public License (AGPL).
 * See License-AGPL.txt in the project root for license information.
 */

// @generated by protoc-gen-es v0.1.1 with parameter "target=ts"
// @generated from file gitpod/stable/v1/yolo.proto (package gitpod.stable.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";

/**
 * @generated from message gitpod.stable.v1.DoSomethingRequest
 */
export class DoSomethingRequest extends Message<DoSomethingRequest> {
  constructor(data?: PartialMessage<DoSomethingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.stable.v1.DoSomethingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DoSomethingRequest {
    return new DoSomethingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DoSomethingRequest {
    return new DoSomethingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DoSomethingRequest {
    return new DoSomethingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DoSomethingRequest | PlainMessage<DoSomethingRequest> | undefined, b: DoSomethingRequest | PlainMessage<DoSomethingRequest> | undefined): boolean {
    return proto3.util.equals(DoSomethingRequest, a, b);
  }
}

/**
 * @generated from message gitpod.stable.v1.DoSomethingResponse
 */
export class DoSomethingResponse extends Message<DoSomethingResponse> {
  /**
   * @generated from field: gitpod.stable.v1.Yolo yolo = 1;
   */
  yolo?: Yolo;

  constructor(data?: PartialMessage<DoSomethingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.stable.v1.DoSomethingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "yolo", kind: "message", T: Yolo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DoSomethingResponse {
    return new DoSomethingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DoSomethingResponse {
    return new DoSomethingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DoSomethingResponse {
    return new DoSomethingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DoSomethingResponse | PlainMessage<DoSomethingResponse> | undefined, b: DoSomethingResponse | PlainMessage<DoSomethingResponse> | undefined): boolean {
    return proto3.util.equals(DoSomethingResponse, a, b);
  }
}

/**
 * @generated from message gitpod.stable.v1.Yolo
 */
export class Yolo extends Message<Yolo> {
  /**
   * page_size is the maximum number of results we expect
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  constructor(data?: PartialMessage<Yolo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "gitpod.stable.v1.Yolo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Yolo {
    return new Yolo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Yolo {
    return new Yolo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Yolo {
    return new Yolo().fromJsonString(jsonString, options);
  }

  static equals(a: Yolo | PlainMessage<Yolo> | undefined, b: Yolo | PlainMessage<Yolo> | undefined): boolean {
    return proto3.util.equals(Yolo, a, b);
  }
}
